package interfaceMod;
import javax.swing.JFrame;
import org.jfree.chart.labels.AbstractCategoryItemLabelGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import java.text.NumberFormat;
import org.jfree.data.category.CategoryDataset;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.ChartPanel;
import java.awt.Dimension;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import java.awt.Color;
import java.awt.Font;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import javax.swing.JPanel;
import org.jfree.ui.RefineryUtilities;
import org.jfree.chart.plot.PlotOrientation;
//import com.lowagie.text.Font;
import java.util.Vector;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.ui.TextAnchor;

public  class  graphGPRSTime  extends  JFrame  {

static  class  LabelGenerator  extends  AbstractCategoryItemLabelGenerator implements  CategoryItemLabelGenerator  {
private  double  threshold;
public  LabelGenerator(double  threshold)
{
  super("",  NumberFormat.getInstance()); this.threshold  =  threshold;
}
/*  public  String  generateLabel(CategoryDataset  dataset, int  series, int  category)
  {
  String  result  =  null;
  Number  value  =  dataset.getValue(series,  category);
  if  (value  !=  null)
  {
    double  v  =  value.doubleValue();
    if  (v  >  this.threshold)
    {
      result  =  value.toString();    //  could  apply  formatting  here
    }
  }
return  result;
}*/
public  String  generateLabel(CategoryDataset  dataset, int  series, int  category)
{
String  result  =  null;
Number  value  =  dataset.getValue(series,  category);
result  =  value.toString();

return  result;
}

}

public  graphGPRSTime(String  title,Vector v)  {
super(title);


CategoryDataset  dataset  =  createDataset(v);
JFreeChart  chart  =  createChart(dataset);
ChartPanel  chartPanel  =  new  ChartPanel(chart);
//chartPanel.setDisplayToolTips(true);
if (v.size()==1)
{
  chartPanel.setPreferredSize(new  Dimension(300,400));
}
else if (v.size()==2)
{
  chartPanel.setPreferredSize(new  Dimension(300,400));
}
else{
chartPanel.setPreferredSize(new  Dimension((v.size()*100),400));
}
setContentPane(chartPanel);
}

private  static  CategoryDataset  createDataset(Vector v)  {
DefaultCategoryDataset  dataset  =  new  DefaultCategoryDataset();
  for(int i =0;i<v.size();i++)
  {
   //double b = Math.round(((Number)v.elementAt(i)).doubleValue());
   double a = ((Number)v.elementAt(i)).doubleValue();
   double b=Math.round(a*100);
dataset.setValue(b/100,"1",""+i);



  }
return  dataset;
}



private  static  JFreeChart  createChart(CategoryDataset  dataset)  {


JFreeChart  chart  =  ChartFactory.createBarChart3D(
"Объём переданных данных по каждому каналу",	//  chart  title
"Канал GPRS",	//  domain  axis  label
"Объём информации, Кбайт",	//  range  axis  label
dataset,	//  data
PlotOrientation.VERTICAL,
false,
true,
false	//  URLs?
);
  chart.setBackgroundPaint(Color.white);
  CategoryPlot  plot  =  chart.getCategoryPlot();
  plot.setBackgroundPaint(Color.lightGray);
  plot.setDomainGridlinePaint(Color.white);
  plot.setRangeGridlinePaint(Color.white);

  BarRenderer  rendererBar  = (BarRenderer)  plot.getRenderer();
  //rendererBar.setSeriesPaint(0,Color.blue);
  rendererBar.setItemLabelFont(new Font("Arial",  Font.BOLD,  12));
  rendererBar.setPositiveItemLabelPosition(new ItemLabelPosition());

  NumberAxis  rangeAxis  =  (NumberAxis)  plot.getRangeAxis();
  rangeAxis.setUpperMargin(0.15);

  CategoryItemRenderer  renderer  =  plot.getRenderer();
  renderer.setToolTipGenerator(new StandardCategoryToolTipGenerator("444444", NumberFormat.getInstance()));
  renderer.setItemLabelGenerator(new  LabelGenerator(30));
  renderer.setItemLabelsVisible(true);

  return  chart;

}




}
